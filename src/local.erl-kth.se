-module(local).

-export([
	 url2mnesia_userlist/1,
	 canonify_user/1,
	 canonify_numberlist/1
	]).

%% lookup
-export([
	 lookup_homedomain_url/1,
	 lookup_remote_url/1,
	 lookupregexproute/1,
	 lookupuser/1,
	 lookupuser_locations/2,
	 lookup_url_to_locations/1,
	 lookup_url_to_addresses/2,
	 lookup_addresses_to_users/1,
	 lookup_address_to_users/1,
	 lookupappserver/1,
	 lookupdefault/1,
	 lookuppotn/1,
	 lookupnumber/1,
	 lookupenum/1,
	 lookuppstn/1,
	 isours/1,
	 format_number_for_remote_party_id/3,
	 get_remote_party_name/2,
	 get_remote_party_number/4,
	 rewrite_potn_to_e164/1,
	 is_request_to_this_proxy/1,
	 remove_unsuitable_locations/2
	]).

%% siplocation
-export([
	 prioritize_locations/2,
	 homedomain/1,
	 get_locations_for_users/1,
	 get_user_with_contact/1
	]).

%% sipauth
-export([
	 get_user_verified/2,
	 get_user_verified_proxy/2,
	 can_use_address/2,
	 can_use_address_detail/2,
	 can_register/2,
	 is_allowed_pstn_dst/4,
	 canonify_authusername/2
	]).

%% sipuserdb
-export([
	 get_addresses_for_user/1,
	 get_addresses_for_users/1,
	 get_users_for_address_of_record/1,
	 get_users_for_addresses_of_record/1,
	 get_users_for_url/1,
	 get_user_with_address/1,
	 get_classes_for_user/1,
	 get_password_for_user/1,
	 get_telephonenumber_for_user/1,
	 get_forwards_for_users/1,
	 sipuserdb_backend_override/3,
	 sipuserdb_mysql_make_sql_statement/2
	]).

%% incomginproxy
-export([
	 incomingproxy_challenge_before_relay/3
	]).

%% pstnproxy
-export([
	 pstnproxy_route_pstn_not_e164/4
	]).

%% outgoinproxy
-export([
	 outgoingproxy_challenge_before_relay/3
	]).

%% sippipe
-export([
	 sippipe_received_response/3
	]).

%% cpl_db
-export([
	 user_has_cpl_script/1,
	 user_has_cpl_script/2,
	 get_cpl_for_user/1
	]).

%% transport layer
-export([
	 is_acceptable_socket/7,
	 is_tls_equivalent/3
	]).

%% custom log and mail cpl functions
-export([
	 cpl_mail/2,
	 cpl_log/4,
	 cpl_is_log_dest/1
	]).

%% configuration
-export([
	 check_config_type/3,
	 config_is_soft_reloadable/2
	]).

%% local.erl-kth.se specifics
-export([
	 shellget/1,
	 mysql_set_password_for_user/2
	]).

-include("siprecords.hrl").
-include("sipsocket.hrl").

url2mnesia_userlist(URL) when record(URL, sipurl), is_list(URL#sipurl.user) ->
    [URL#sipurl.user ++ "@" ++ URL#sipurl.host, URL#sipurl.user];
url2mnesia_userlist(URL) when record(URL, sipurl) ->
    [].

% Turn a SIP username into an address which can be reached from anywhere.
% Used for example from the Mnesia userdb-module. It should be possible
% to call Mnesia users based on their username, but the username might
% need sip: prepended to it, or a default domain name appended to it.
canonify_user("sip:" ++ User) ->
    "sip:" ++ User;
canonify_user(Fulluser) ->
    case string:tokens(Fulluser, "@") of
        [User, Host] ->
            "sip:" ++ Fulluser;
        [User] ->
	    "sip:" ++ User ++ "@" ++ sipauth:realm()
    end.

% Turns numbers into fully qualified tel: URLs or if that is not
% possible, return empty list. Used from some userdb-modules which
% get non-fully qualified phone numbers (like local extension numbers)
% back from the database.
canonify_numberlist([]) ->
    [];
canonify_numberlist(["tel:+" ++ E164 | Rest]) ->
    lists:append(["tel:+" ++ E164], canonify_numberlist(Rest));
canonify_numberlist(["+" ++ E164 | Rest]) ->
    case util:isnumeric(E164) of
	true ->
	    lists:append(["tel:+" ++ E164], canonify_numberlist(Rest));
	_ ->
	    canonify_numberlist(Rest)
    end;
canonify_numberlist([Number | Rest]) ->
    case rewrite_potn_to_e164(Number) of
	"+" ++ E164 -> lists:append(["tel:+" ++ E164], canonify_numberlist(Rest));
	_ -> canonify_numberlist(Rest)
    end.


% Routing hooks
%%%%%%%%%%%%%%%%

lookup_homedomain_url(URL) when record(URL, sipurl) ->
    Mail = URL#sipurl.user ++ "@" ++ URL#sipurl.host,
    Loc1 = mail2tel(Mail),
    logger:log(debug, "Local routing: mail2tel ~p -> ~p", [Mail, Loc1]),
    case Loc1 of
	none ->
	    none;
	Loc1 ->
	    lookup:lookuppotn(Loc1)
    end.

mail2tel(Mail) ->
    case directory:lookup_mail2uid(Mail) of
        none ->
            lookupkthid_address(Mail);
        KTHid ->
            lookupkthid_address(KTHid ++ "@kth.se")
    end.

lookup_remote_url(URL) ->
    none.

is_request_to_this_proxy(Request) when record(Request, request) ->
    lookup:is_request_to_this_proxy(Request).

do_recv(Sock, Text) ->
    receive
	{tcp, Sock, Data} ->
	    do_recv(Sock, Text ++ Data);
	{tcp_closed, Sock} ->
	    Text
    end.

parse_packet(Packet) ->
    Packetfixed = siputil:linefix(Packet),
    case string:str(Packetfixed, "\n\n") of
	0 ->
	    {Packetfixed, ""};
	Headerlen ->
	    HeaderStr = string:substr(Packetfixed, 1, Headerlen),
	    BodyStr = string:substr(Packetfixed, Headerlen + 2),
	    {HeaderStr, BodyStr}
    end.

lookupkthid(KTHid) ->
    Server = "yorick.admin.kth.se",
    {ok, Sock} = gen_tcp:connect(Server, 80,
				 [list, {packet, 0}]),
    ok = gen_tcp:send(Sock, "GET /service/personsokning/kthid2tele.asp?kthid=" ++ KTHid ++ " HTTP/1.0\r\n\r\n"),

    Text = do_recv(Sock, ""),
    {Header, Body} = parse_packet(Text),
    ok = gen_tcp:close(Sock),
    Numbers = string:tokens(Body, "\r\n"),
    case Numbers of
	[] ->
	    none;
	[Number | _] ->
	    Number
    end.

lookupkthid_address(Address) ->
    case group_regexp:groups(Address, "(u[0-9]......)@kth.se") of
	{match, [KTHid]} ->
	    lookupkthid(KTHid);
	nomatch ->
	    none;
	{error, Error} ->
	    none
    end.



% lookup.erl hooks
%%%%%%%%%%%%%%%%%%%

lookupregexproute(User) ->
    lookup:lookupregexproute(User).

%% Returns : {proxy, URL} | {relay, URL} | {forward, URL} | {response, Status, Reason}
lookupuser(URL) ->
    lookup:lookupuser(URL).

%% Returns : list() of siplocationdb_e record()
lookupuser_locations(Users, URL) ->
    lookup:lookupuser_locations(Users, URL).

%% Returns : list() of sipurl record()
remove_unsuitable_locations(URL, Locations) when is_record(URL, sipurl), is_list(Locations) ->
    lookup:remove_unsuitable_locations(URL, Locations).

lookup_url_to_locations(URL) ->
    lookup:lookup_url_to_locations(URL).

lookup_url_to_addresses(Src, URL) ->
    lookup:lookup_url_to_addresses(Src, URL).

lookup_addresses_to_users(Addresses) ->
    lookup:lookup_addresses_to_users(Addresses).

lookup_address_to_users(Address) ->
    lookup:lookup_address_to_users(Address).

lookupappserver(Key) ->
    lookup:lookupappserver(Key).

prioritize_locations(Key, Locations) ->
    siplocation:prioritize_locations(Locations).

lookupdefault(URL) ->
    lookup:lookupdefault(URL).

lookuppotn(Number) ->
    lookup:lookuppotn(Number).

lookupnumber(Number) ->
    lookup:lookupnumber(Number).

lookupenum(Number) ->
    lookup:lookupenum(Number).

lookuppstn(Number) ->
    lookup:lookuppstn(Number).

isours(URL) ->
    lookup:isours(URL).

homedomain(Domain) ->
    lookup:homedomain(Domain).

%% Returns: {ok, RPI, Number} | none
get_remote_party_number(User, Header, URI, DstHost) ->
    lookup:get_remote_party_number(User, Header, URI, DstHost).

%% Returns: {ok, Number} | none
format_number_for_remote_party_id(Number, Header, DstHost) ->
    lookup:format_number_for_remote_party_id(Number, Header, DstHost).

%% Returns: {ok, DisplayName} | none
get_remote_party_name(Key, DstHost) ->
    lookup:get_remote_party_name(local:rewrite_potn_to_e164(Key), DstHost).

rewrite_potn_to_e164(Key) ->
    lookup:rewrite_potn_to_e164(Key).


% userdb hooks
%%%%%%%%%%%%%%%

% Looks up exactly one user with an Address. Used
% for example in REGISTER. If there are multiple
% users with an address, this function returns {error}.
get_user_with_address(Address) ->
   sipuserdb:get_user_with_address(Address).

% Looks up all users with a given address. Used
% to find out to which users we should send a request.
get_users_for_address_of_record(Address) ->
    sipuserdb:get_users_for_address_of_record(Address).

get_users_for_addresses_of_record(Addresses) ->
    sipuserdb:get_users_for_addresses_of_record(Addresses).

% Gets all addresses for a user. Used for example
% to check if a request from a user has an acceptable
% From: header.
get_addresses_for_user(User) ->
    sipuserdb:get_addresses_for_user(User).

get_addresses_for_users(Users) ->
    sipuserdb:get_addresses_for_users(Users).

get_users_for_url(URL) ->
    sipuserdb:get_users_for_url(URL).

get_password_for_user(User) ->
    sipuserdb:get_password_for_user(User).

get_classes_for_user(User) ->
    sipuserdb:get_classes_for_user(User).

get_telephonenumber_for_user(User) ->
    sipuserdb:get_telephonenumber_for_user(User).

get_forwards_for_users(Users) ->
    case sipuserdb:get_forwards_for_users(Users) of
	{Forwards, Timeout, Localring} when list(Forwards) ->
	    Func = fun(Forward) ->
			   sipurl:new([{proto, "sip"}, {user, Forward}, {host, "kth.se"}])
		   end,
	    NewForwards = lists:map(Func, Forwards),
	    {NewForwards, Timeout, Localring};
	Res ->
	    Res
    end.

%% Module   = atom(), sipuserdb module
%% Function = atom(), function in Module
%% Args     = term(), arguments to function
%% Returns : {ok, Res} | undefined
%%           If 'undefined' is returned, the real backend function will be called
sipuserdb_backend_override(sipuserdb_mysql, get_password_for_user, Args) ->
    mysql_get_password_for_user(yxa, Args);
sipuserdb_backend_override(_Module, _Function, _Args) ->
    undefined.

%% Returns : {ok, Res} | undefined
sipuserdb_mysql_make_sql_statement(sipuserdb_mysql_get_user_for_address, Args) ->
    [AddressList] = Args,
    %% rewrite args slightly before calling original version
    AddressListMod =
	lists:foldl(
	  fun (Address, Acc) ->
		  case util:regexp_rewrite(Address,
					   [{"sip:(.*)@test.kth.se", "\\1"}]) of
		      nomatch ->
			  Acc;
		      A ->
			  [A | Acc]
		  end
	  end, [], AddressList),
    sipuserdb_mysql:make_sql_statement(sipuserdb_mysql_get_user_for_address, AddressListMod);
sipuserdb_mysql_make_sql_statement(_CfgKey, _Args) ->
    undefined.

mysql_set_password_for_user(User, Password) ->
    IV = shellget("openssl rand 8"),
    logger:log(debug, "local.erl-kth.se:set_password_for_user : IV: ~p", [IV]),
    Data = encrypt_password(IV, Password),
    case mysql:fetch(yxa,
		     "insert into password (kthid,iv,mac,data) values (" ++
                     mysql:quote(User) ++ "," ++
                     mysql:quote(binary_to_list(IV)) ++ "," ++
                     mysql:quote(calc_password_hmac(Data, User)) ++ "," ++
                     mysql:quote(Data) ++ ")") of
	{ok, _, Message} ->
	    logger:log(debug, "local.erl-kth.se:set_password_for_user : ~p", [Message]),
	    nomatch;
	{error, Reason} ->
	    logger:log(error, "local.erl-kth.se:set_password_for_user : Error for kthid ~p: ~p", [User, Reason]),
	    error
    end.

mysql_get_password_for_user(Id, User) ->
    %% sipuserdb_mysql:set_password_for_user("u1lhi9k2", "foobar"),
    Query1 = sipuserdb_mysql:make_sql_statement(sipuserdb_mysql_get_password_for_user,
						User),
    case mysql:fetch(Id, Query1) of
        {error, Message} ->
            logger:log(error, "local.erl-kth.se:get_password_for_user : Error for kthid ~p: ~p", [User, Message]),
            error;
        {_, []} ->
            logger:log(debug, "local.erl-kth.se:set_password_for_user : No such kthid ~p when fetching password",
		       [User]),
            nomatch;
        {_, [[IV, Mac, Data], _]} ->
            Password = decrypt_password(IV, Data),
            case check_password_hmac(Mac, Data, User) of
                true ->
                    logger:log(debug, "local.erl-kth.se:set_password_for_user : pwd: ~p", [Password]),
                    Password;
                _ ->
                    nomatch
            end
    end.

pack_password(Password) when binary(Password), size(Password) < 255 ->
    Length = size(Password),
    Padlength = 8 - (((Length + 2) rem 8) - 1),
    Pad = list_to_binary(lists:duplicate(Padlength, 0)),
    <<Length:8,
    Password/binary,
    Pad/binary>>.

unpack_password(Data) when binary(Data) ->
    <<Length:8,
    Rest/binary>> = Data,
    <<Password:Length/binary-unit:8, _Rest2/binary>> = Rest,
    binary_to_list(Password).

decrypt_password(IV, Data) ->
    {ok, Key1} = yxa_config:get_env(local_password_des3_key1),
    {ok, Key2} = yxa_config:get_env(local_password_des3_key2),
    {ok, Key3} = yxa_config:get_env(local_password_des3_key3),
    logger:log(debug, "local.erl-kth.se:decrypt_password : IV ~p Data ~p", [IV, Data]),
    Res = crypto:des3_cbc_decrypt(Key1, Key2, Key3, IV, Data),
    logger:log(debug, "local.erl-kth.se:decrypt_password : Res ~p", [unpack_password(Res)]),
    unpack_password(Res).

encrypt_password(IV, Data) ->
    {ok, Key1} = yxa_config:get_env(local_password_des3_key1),
    {ok, Key2} = yxa_config:get_env(local_password_des3_key2),
    {ok, Key3} = yxa_config:get_env(local_password_des3_key3),
    logger:log(debug, "local.erl-kth.se:encrypt_password: IV ~p Data ~p", [IV, Data]),
    Res = binary_to_list(crypto:des3_cbc_encrypt(Key1, Key2, Key3, IV,
						 pack_password(list_to_binary(Data)))),
    logger:log(debug, "local.erl-kth.se:encrypt_password: Res ~p", [Res]),
    Res.

% Salt with kthid

calc_password_hmac(Data, Kthid) ->
    {ok, Key} = yxa_config:get_env(local_password_shamac_key),
    logger:log(debug, "local.erl-kth.se:calc_password_hmac: Key ~p Data ~p Kthid ~p", [Key, Data, Kthid]),
    Res = binary_to_list(crypto:sha_mac(Key, Kthid ++ ":" ++ Data)),
    logger:log(debug, "local.erl-kth.se:calc_password_hmac: Res ~p", [Res]),
    Res.

check_password_hmac(Mac, Data, Kthid) ->
    case calc_password_hmac(Data, Kthid) of
	Mac ->
	    true;
	_ ->
	    false
    end.


shellget(Command) ->
    Port = open_port({spawn, Command}, [stream, binary, eof]),
    shellgetloop(Port, <<>>).

shellgetloop(Port, Acc) ->
    receive
	{Port, {data, Data}} ->
	    shellgetloop(Port, <<Data/binary, Acc/binary>>);
	{Port, eof} ->
	    Acc
    end.


% Location lookup hooks
%%%%%%%%%%%%%%%%%%%%%%%%

% Looks up all contacts for a list of users. Used
% to find out where a set of users are to see where
% we should route a request.
get_locations_for_users(Users) ->
    siplocation:get_locations_for_users(Users).

% Checks if any of our users are registered at the
% location specified. Used to determine if we should
% proxy requests to a URI without authorization.
get_user_with_contact(URI) ->
    siplocation:get_user_with_contact(URI).


% AAA hooks
%%%%%%%%%%%%

get_user_verified(Header, Method) ->
    sipauth:get_user_verified(Header, Method).

get_user_verified_proxy(Header, Method) ->
    sipauth:get_user_verified_proxy(Header, Method).

can_use_address(User, URL) when is_list(User), is_record(URL, sipurl) ->
    sipauth:can_use_address(User, URL).

can_use_address_detail(User, URL) when is_list(User), is_record(URL, sipurl) ->
    sipauth:can_use_address_detail(User, URL).

%% Returns : {{Verdict, Reason}, User} |
%%           {stale, User}             |
%%           {false, none}
%%           Verdict = true | false
%%           Reason  = ok | eperm | nomatch | error
can_register(Header, ToURL) when is_record(Header, keylist), is_record(ToURL, sipurl) ->
    sipauth:can_register(Header, ToURL).

is_allowed_pstn_dst(User, ToNumber, Header, Class) ->
    sipauth:is_allowed_pstn_dst(User, ToNumber, Header, Class).

%% Returns : NewAuthDict
canonify_authusername(Username, Header) when is_list(Username), is_record(Header, keylist) ->
    undefined.

% incomingproxy hooks
%%%%%%%%%%%%%%%%%%%%%%

incomingproxy_challenge_before_relay(Origin, Request, Dst) when is_record(Origin, siporigin),
								is_record(Request, request) ->
    true.

%% pstnproxy hooks
%%%%%%%%%%%%%%%%%%%%%%%

%% Returns : undefined | nomatch | ignore | {relay, DstURI, NewRequest}
pstnproxy_route_pstn_not_e164(_DstNumber, _Request, _Origin, _THandler) ->
    undefined.

% outgoingproxy hooks
%%%%%%%%%%%%%%%%%%%%%%

outgoingproxy_challenge_before_relay(Origin, Request, Dst) when is_record(Origin, siporigin),
								is_record(Request, request) ->
    true.

% sippipe hooks
%%%%%%%%%%%%%%%%
sippipe_received_response(Request, Response, DstList) ->
    none.

% cpl_db hooks
%%%%%%%%%%%%%%%%

%% Returns: true | false
user_has_cpl_script(User) ->
    cpl_db:user_has_cpl_script(User).

%% Returns: true | false
user_has_cpl_script(User, Direction)->
    cpl_db:user_has_cpl_script(User, Direction).

%% Returns: term(), cpl script graph
get_cpl_for_user(User) ->
    cpl_db:get_cpl_for_user(User).

%% transport layer hooks
%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Returns: true | false | undefined
is_acceptable_socket(_Socket, _Dir, _Proto, _Host, _Port, _Module, _Subject) ->
    undefined.

%% Returns : true | false | undefined
is_tls_equivalent(_Proto, _Host, _Port) ->
    undefined.


%%--------------------------------------------------------------------
%% See cpl/README
%%--------------------------------------------------------------------
cpl_log(_LogName, _Comment, _User, _Request) ->
    undefined.

cpl_is_log_dest(_LogName) ->
    undefined.

cpl_mail(_Mail, _User) ->
    undefined.


%% configuration hooks
%%%%%%%%%%%%%%%%%%%%%%%

%%--------------------------------------------------------------------
%% Function: check_config_type(Key, Value, Src)
%%           Key     = atom()
%%           Value   = term()
%%           Src     = atom(), config backend module that found this
%%                             configuration parameter
%% Descrip.: Check a local configuration parameter. Local parameters
%%           are local_*.
%% Returns : {ok, NewValue} |
%%           {error, Msg}
%%           NewValue = term()
%%           Msg      = string()
%%--------------------------------------------------------------------
check_config_type(_Key, Value, _Src) ->
    {ok, Value}.

%%--------------------------------------------------------------------
%% Function: config_is_soft_reloadable(Key, Value)
%%           Key     = atom()
%%           Value   = term()
%% Descrip.: Check if it is possible to change a local configuration
%%           parameter with a soft reconfiguration (true), or if a
%%           complete restart of the application is necessary (false).
%% Returns : true | false
%%--------------------------------------------------------------------
config_is_soft_reloadable(_Key, _Value) ->
    true.
